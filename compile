#!/bin/bash

unset CDPATH

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

COMPILE=0
RPM=0
DEB=0
WIN=0

MAVEN="http://central.maven.org/maven2/"
VERSION=$(cat libaris/res/edu/rpi/aris/VERSION)

OPTIND=1

get_libs() {
    if [ -z "$1" ]; then
        return
    fi
    command -v wget &> /dev/null
    if [ "$?" -ne "0" ]; then
        echo "wget is required to download libraries and does not appear to be present"
        exit 1
    fi
    echo Checking $1 libraries
    mkdir -p build/lib
    for lib in $(cat $1/$1.iml| grep type=\"library\" |awk '{split($0,a,"name=\""); split(a[2],b,"\""); print b[1]}'); do
        IFS=':' read -r -a split <<< "$lib"
        group="${split[0]}"
        artifact="${split[1]}"
        version="${split[2]}"
        group="${group//.//}"
        name=$artifact-$version.jar
        if [ ! -f build/lib/$name ]; then
            echo -n "Downloading $artifact Version $version ... "
            wget -q -O "build/lib/$name" "$MAVEN$group/$artifact/$version/$name"
            echo Done
        fi
    done
}

compile() {
    command -v javac &> /dev/null
    if [ "$?" -ne "0" ]; then
        echo "javac is required to compile the java classes and does not appear to be present"
        exit 1
    fi
    command -v zip &> /dev/null
    if [ "$?" -ne "0" ]; then
        echo "zip is required to create the jar file and does not appear to be present"
        exit 1
    fi
    get_libs libaris
    get_libs client
    get_libs server
    mkdir -p build/classes/client
    mkdir -p build/classes/server
    shopt -s globstar
    echo -n Compiling java classes ...
    javac -d build/classes/client -cp "build/lib/*" libaris/src/**/*.java client/src/**/*.java
    javac -d build/classes/server -cp "build/lib/*" libaris/src/**/*.java server/src/**/*.java
    cp -r libaris/res/* build/classes/client
    cp -r client/res/* build/classes/client
    cp -r libaris/res/* build/classes/server
    echo " Done"
    echo -n Building jar files ...
    mkdir -p build/classes/client/META-INF
    mkdir -p build/classes/server/META-INF
    cp client/src/META-INF/MANIFEST.MF build/classes/client/META-INF
    cp server/src/META-INF/MANIFEST.MF build/classes/server/META-INF
    cd build/classes/client
    zip -r ../../aris-client.jar * &> /dev/null
    cd ../server
    zip -r ../../aris-server.jar * &> /dev/null
    cd ../../..
    echo " Done"
}

build_rpm() {
    echo Hi
}

build_deb() {
    command -v dpkg &> /dev/null
    if [ "$?" -ne "0" ]; then
        echo "dpkg is required to build deb package and does not appear to be present"
        exit 1
    fi
    command -v sed &> /dev/null
    if [ "$?" -ne "0" ]; then
        echo "sed command is required to prepare files for packaging and does not appear to be present"
        exit 1
    fi
    echo -n Building deb package ...
    rm -rf build/deb
    mkdir -p build/deb
    cp -r packaging/deb/* build/deb
    cd build/deb
    sed -i -e "s/__version__/$VERSION/g" server/DEBIAN/control
    mkdir -p server/usr/lib/aris
    cp -r ../aris-server.jar ../lib server/usr/lib/aris
    dpkg --build server > /dev/null
    mv server.deb ../aris-server-$VERSION.deb
    cd ../..
    echo " Done"
}

build_win() {
    echo Hi
}

usage() {
    echo Usage: ./compile [options]
    echo "    -c    Compile only (default)"
    echo "    -r    Compile and build rpm"
    echo "    -d    Compile and build deb"
    echo "    -w    Compile and build windows exe"
    echo "    -a    Compile and build all packages"
}


OPTS=0
while getopts "crdwah" opt; do
    OPTS=1
    case "$opt" in
    c)
        compile
        ;;
    r)
        compile
        build_rpm
        ;;
    d)
        compile
        build_deb
        ;;
    w)
        compile
        build_win
        ;;
    a)
        compile
        build_rpm
        build_deb
        build_win
        ;;
    *)
        usage
        ;;
    esac
done
if [ "$OPTS" -eq "0" ]; then
    compile
fi