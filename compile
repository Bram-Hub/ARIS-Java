#!/bin/bash

unset CDPATH

cd "$( dirname "${BASH_SOURCE[0]}" )" || exit 1

VERSION=$(cat libaris/src/main/resources/edu/rpi/aris/VERSION)

OPTIND=1

compile() {
    echo Cleaning build directory before compiling
    rm -rf build/
    make clean
    ./gradlew clean
    echo Compiling gradle and native libraries
    make all
    if [ "$?" -ne "0" ]; then
        echo An error occurred during compiling
        exit 1
    fi
    echo Rebuilding jars
    ./gradlew jar
    echo Compiliation complete
}

build_update() {
    if [ "$?" -ne "0" ]; then
        echo "zip is required to build packages and does not appear to be present"
        exit 1
    fi
    rm build/server-update.zip &> /dev/null
    echo -n Building update zip files ...
    mkdir -p build/server-update
    cp -r packaging/extra/server/* build/server-update
    cp -r assign-server/jars/* build/server-update
    cd build/server-update || exit 1
    zip -r ../server-update.zip * > /dev/null
    cd ../.. || exit 1
    mkdir -p build/client-update
    # cp -r packaging/extra/client/* build/client-update
    cp -r assign-client/jars/* build/client-update
    cd build/client-update || exit 1
    zip -r ../client-update.zip * > /dev/null
    cd ../.. || exit 1
    echo " Done"
}

build_rpm() {
    echo TODO: build_rpm
}

build_deb() {
    command -v dpkg &> /dev/null
    if [ "$?" -ne "0" ]; then
        echo "dpkg is required to build deb package and does not appear to be present"
        exit 1
    fi
    command -v sed &> /dev/null
    if [ "$?" -ne "0" ]; then
        echo "sed command is required to prepare files for packaging and does not appear to be present"
        exit 1
    fi
    echo -n Building deb package ...
    rm -rf build/deb
    mkdir -p build/deb
    cp -r packaging/deb/* build/deb
    cd build/deb || exit 1
    sed -i -e "s/__version__/$VERSION/g" server/DEBIAN/control
    mkdir -p server/usr/lib/aris
    cp -r ../../assign-server/jars/* server/usr/lib/aris
    cp -r ../../packaging/extra/server/* server/usr/lib/aris
    dpkg --build server > /dev/null
    mv server.deb ../aris-assign-server-$VERSION.deb
    cd ../.. || exit 1
    echo " Done"
}

build_win() {
    echo TODO build_win
    # mkdir -p build/win
    # if [ ! -e build/win/launch4j/launch4j ]; then
    #     echo -n Downloading launch4j ...
    #     wget -O build/win/launch4j.tgz https://cytranet.dl.sourceforge.net/project/launch4j/launch4j-3/3.11/launch4j-3.11-linux-x64.tgz &> /dev/null
    #     tar -xzf build/win/launch4j.tgz -C build/win > /dev/null
    #     echo " Done"
    # fi
    # echo -n Building windows package ...
    # cp packaging/win/launch4j.xml build/win
    # cp logo.ico build/win
    # cd build/win
    # launch4j/launch4j launch4j.xml > /dev/null
    # cp aris.exe ..
    # cd ..
    # zip -r aris-win.zip aris.exe aris-client.jar lib > /dev/null
    # echo " Done"
    # echo -n Preparing installer files for NSIS ...
    # mkdir -p win-installer
    # cp -r aris.exe aris-client.jar lib ../logo.ico ../packaging/win/installscript.nsi win-installer
    # cp ../LICENSE win-installer/LICENSE.txt
    # cd ..
    # echo " Done"
    # echo To create the installer please use NSIS to run the script located in build/win-installer
}

usage() {
    echo Usage: ./compile [options]
    echo "    -c    Compile only (default)"
    echo "    -r    Compile and build rpm"
    echo "    -d    Compile and build deb"
    echo "    -w    Compile and build windows exe"
    echo "    -a    Compile and build all packages"
}


OPTS=0
while getopts "crdwah" opt; do
    OPTS=1
    case "$opt" in
    c)
        compile
        ;;
    r)
        compile
        build_update
        build_rpm
        ;;
    d)
        compile
        build_update
        build_deb
        ;;
    w)
        compile
        build_update
        build_win
        ;;
    a)
        compile
        build_update
        build_rpm
        build_deb
        build_win
        ;;
    *)
        usage
        ;;
    esac
done
if [ "$OPTS" -eq "0" ]; then
    compile
fi
